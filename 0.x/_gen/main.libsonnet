local d = (import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet');
{
  '#':: d.pkg(name='hcp', url='', help='The `hcp` package contains functions and utilities for setting up the provider, resources, and data\nsources of the [hcp Terraform provider](TODO) using Jsonnet.\n\nThis package is autogenerated from the [tf-libsonnet/libgenerator](https://github.com/tf-libsonnet/libgenerator)\nproject.\n'),
  provider: (import 'provider_hcp.libsonnet'),
  aws_network_peering: (import 'resources/aws_network_peering.libsonnet'),
  aws_transit_gateway_attachment: (import 'resources/aws_transit_gateway_attachment.libsonnet'),
  azure_peering_connection: (import 'resources/azure_peering_connection.libsonnet'),
  boundary_cluster: (import 'resources/boundary_cluster.libsonnet'),
  consul_cluster: (import 'resources/consul_cluster.libsonnet'),
  consul_cluster_root_token: (import 'resources/consul_cluster_root_token.libsonnet'),
  consul_snapshot: (import 'resources/consul_snapshot.libsonnet'),
  hvn: (import 'resources/hvn.libsonnet'),
  hvn_peering_connection: (import 'resources/hvn_peering_connection.libsonnet'),
  hvn_route: (import 'resources/hvn_route.libsonnet'),
  iam_workload_identity_provider: (import 'resources/iam_workload_identity_provider.libsonnet'),
  log_streaming_destination: (import 'resources/log_streaming_destination.libsonnet'),
  notifications_webhook: (import 'resources/notifications_webhook.libsonnet'),
  organization_iam_binding: (import 'resources/organization_iam_binding.libsonnet'),
  organization_iam_policy: (import 'resources/organization_iam_policy.libsonnet'),
  packer_channel: (import 'resources/packer_channel.libsonnet'),
  packer_channel_assignment: (import 'resources/packer_channel_assignment.libsonnet'),
  packer_run_task: (import 'resources/packer_run_task.libsonnet'),
  project: (import 'resources/project.libsonnet'),
  project_iam_binding: (import 'resources/project_iam_binding.libsonnet'),
  project_iam_policy: (import 'resources/project_iam_policy.libsonnet'),
  service_principal: (import 'resources/service_principal.libsonnet'),
  service_principal_key: (import 'resources/service_principal_key.libsonnet'),
  vault_cluster: (import 'resources/vault_cluster.libsonnet'),
  vault_cluster_admin_token: (import 'resources/vault_cluster_admin_token.libsonnet'),
  vault_plugin: (import 'resources/vault_plugin.libsonnet'),
  vault_secrets_app: (import 'resources/vault_secrets_app.libsonnet'),
  vault_secrets_secret: (import 'resources/vault_secrets_secret.libsonnet'),
  data: (import 'data/main.libsonnet'),
}
